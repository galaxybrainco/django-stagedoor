name: Release

on:
  workflow_run:
    workflows: ["Python package"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type (patch, minor, major)"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') }}
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -Po '(?<=version = ")[^"]*' _version.txt)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine version bump
        id: determine_bump
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "bump_type=${{ github.event.inputs.version_bump }}" >> $GITHUB_OUTPUT
          else
            # Default to patch unless commit messages indicate otherwise
            BUMP_TYPE="patch"

            # Get commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              COMMITS=$(git log --pretty=format:"%s%n%b" --no-merges)
            else
              COMMITS=$(git log --pretty=format:"%s%n%b" --no-merges $LAST_TAG..HEAD)
            fi

            # Check for major version indicator
            if echo "$COMMITS" | grep -qi "Major Version Bump"; then
              BUMP_TYPE="major"
            # Check for minor version indicator
            elif echo "$COMMITS" | grep -qi "Minor Version Bump"; then
              BUMP_TYPE="minor"
            fi

            echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          fi
          echo "Bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          BUMP_TYPE="${{ steps.determine_bump.outputs.bump_type }}"

          # Split version into components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Increment based on bump type
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update version in pyproject.toml
        run: |
          sed -i 's/${{ steps.current_version.outputs.version }}/${{ steps.new_version.outputs.version }}/' _version.txt

      - name: Commit version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
          git push

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.new_version.outputs.version }}" -m "Release v${{ steps.new_version.outputs.version }}"
          git push origin "v${{ steps.new_version.outputs.version }}"

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install build twine

      - name: Build package
        run: |
          source .venv/bin/activate
          python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          name: Release v${{ steps.new_version.outputs.version }}
          body: |
            ## Changes in v${{ steps.new_version.outputs.version }}

            This release was automatically created based on commits to the main branch.

            ### Version bump type: ${{ steps.determine_bump.outputs.bump_type }}

            See the [commit history](https://github.com/${{ github.repository }}/compare/${{ steps.current_version.outputs.version }}...v${{ steps.new_version.outputs.version }}) for detailed changes.
          draft: false
          prerelease: false
